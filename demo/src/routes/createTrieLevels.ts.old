import type { TrieNode } from 'trie-search';

export type FlatNode = TrieNode<string> & {
	value: string;
};

const makeLevels = (levels: FlatNode[][], level: number) => {
	const current = levels[level];
	if (current) {
		current.forEach((node) => {
			const children = [...(node.children?.entries() || [])];

			children.forEach((child) => {
				if (!levels[level + 1]) {
					levels[level + 1] = [];
				}

				levels[level + 1].push({ ...child[1], value: child[0]});
			});
		});

		makeLevels(levels, level + 1);
	}
};

export const createTrieLevels = (root: TrieNode<string>): FlatNode[][] => {
	const level = 0;
	const levels: FlatNode[][] = [];

	const children = [...(root.children?.entries() || [])];

	children.forEach((child) => {
		if (!levels[level]) {
			levels[level] = [];
		}

		levels[level].push({ ...child[1], value: child[0]});
	});

	makeLevels(levels, level);

	return levels;
};
