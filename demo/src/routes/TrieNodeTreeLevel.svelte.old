<script lang="ts">
	import { flatMap, flatten } from 'lodash-es';
	import type { TrieNode } from 'trie-search';

	type FlatNode = TrieNode<string> & 
		{
			value: string;
		}

	const makeLevels = (levels: FlatNode[][], level: number) => 
	{
		const current = levels[level];
		current?.forEach(node => {
			const children = [...node.children?.entries() || []];

			children.forEach(child => {
				if (!levels[level+1]) {
					levels[level+1] = [];
				}

				levels[level+1].push({...child[1], value: child[0]});
			});
		});

		makeLevels(levels, level+1);
	}

	// render sets of nodes at the same level
	// and then render their child level
	export let nodeSets : [string, TrieNode<string>][][];

/*
tease
tea
ease
easy
easier

t
e
a=1
s
e=0,2	y=3		i
                e
				r=4



*/

	$: childSets = flatMap(flatten(nodeSets), (node => {
		return [...(node[1].children?.entries() || [])];
	}));

</script>

<div class="trie-node" style={`--level: ${level}px`}>
	<div class="node">{text}</div>
	{#each nodeSets as nodeSet} 
		<div class="node-set">
			{#each nodeSet as node}
				<div>{node.}</div>
			{/each}
		</div>
	{/each}
	{#each children as child}
		<svelte:self text={child[0]} path={`${path}/${child[0]}`} node={child[1]} level={level + 1} />
	{/each}
</div>

<style>
	.node {
		padding-left: calc(var(--level) * 10);
		border: 1px solid black;
	}
</style>
